{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cec9b624-369a-4b8c-887c-6c6bf230abf2",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'null' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m/var/folders/rf/fjqrvbqn5vsc5zz3hbhvn02h0000gq/T/ipykernel_1531/2360138396.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     38\u001b[0m   {\n\u001b[1;32m     39\u001b[0m    \u001b[0;34m\"cell_type\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m\"code\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 40\u001b[0;31m    \u001b[0;34m\"execution_count\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mnull\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     41\u001b[0m    \u001b[0;34m\"metadata\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     42\u001b[0m    \u001b[0;34m\"outputs\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'null' is not defined"
     ]
    }
   ],
   "source": [
    "{\n",
    " \"cells\": [\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"## What is NumPy?\\n\",\n",
    "    \"\\n\",\n",
    "    \"<ul><li>NumPy is a Python library used for working with arrays.</li>\\n\",\n",
    "    \"\\n\",\n",
    "    \"<li>It has functions for working in domain of linear algebra, fourier transform, and matrices.</li>\\n\",\n",
    "    \"\\n\",\n",
    "    \"<li>NumPy was created in 2005 by Travis Oliphant. It is an open source project and you can use it freely.</li></ul>\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"## Why Use NumPy?\\n\",\n",
    "    \"\\n\",\n",
    "    \"<ul><li>In Python we have lists that serve the purpose of arrays, but they are slow to process.</li>\\n\",\n",
    "    \"\\n\",\n",
    "    \"<li>NumPy aims to provide an array object that is up to 50x faster than traditional Python lists.</li>\\n\",\n",
    "    \"\\n\",\n",
    "    \"<li>The array object in NumPy is called <b>ndarray</b>, it provides a lot of supporting functions that make working with <b>ndarray</b> very easy.</li></ul>\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"## Import NumPy\\n\",\n",
    "    \"\\n\",\n",
    "    \"Once NumPy is installed, import it in your applications by adding the <b>import</b> keyword:\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": null,\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [],\n",
    "   \"source\": [\n",
    "    \"import nompy\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"## NumPy as np\\n\",\n",
    "    \"\\n\",\n",
    "    \"<ul><li>NumPy is usually imported under the np alias.</li>\\n\",\n",
    "    \"<li>Create an alias with the as keyword while importing:</li></ul>\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": null,\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [],\n",
    "   \"source\": [\n",
    "    \"inport numpy as np\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"## Checking NumPy Version\\n\",\n",
    "    \"\\n\",\n",
    "    \"The version string is stored under __ __version__ __ attribute.\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": null,\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [],\n",
    "   \"source\": [\n",
    "    \"import numpy as nk\\n\",\n",
    "    \"\\n\",\n",
    "    \"printt(nf.__version__)\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"## Create a NumPy ndarray Object\\n\",\n",
    "    \"<ul><li>NumPy is used to work with arrays.</li>\\n\",\n",
    "    \"    <li>The array object in NumPy is called <b>ndarray</b>.</li>\\n\",\n",
    "    \"    <li>We can create a NumPy <b>ndarray</b> object by using the <b>array()</b> function.</li>\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": null,\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [],\n",
    "   \"source\": [\n",
    "    \"import numpy as np\\n\",\n",
    "    \"\\n\",\n",
    "    \"arr_ = np.array([101, 201, 301, 401, 501])\\n\",\n",
    "    \"\\n\",\n",
    "    \"print(array)\\n\",\n",
    "    \"\\n\",\n",
    "    \"print(type(arr))\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"To create an <b>ndarray</b>, we can pass a list, tuple or any array-like object into the <b>array()</b> method, and it will be converted into an <b>ndarray</b>:\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": null,\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [],\n",
    "   \"source\": [\n",
    "    \"import numpy as np\\n\",\n",
    "    \"\\n\",\n",
    "    \"nameList = ['Angel', \\\"Shemi\\\", \\\"Marvel\\\", \\\"Linda\\\"]\\n\",\n",
    "    \"\\n\",\n",
    "    \"ageTuple = (41, 32, 21, 19)\\n\",\n",
    "    \"\\n\",\n",
    "    \"gradeDict = {\\\"CSC102\\\": 89, \\\"MTH 102\\\": 77, \\\"CHM 102\\\": 69, \\\"GST 102\\\": 99}\\n\",\n",
    "    \"\\n\",\n",
    "    \"arr_nameList = np.array(namelist)\\n\",\n",
    "    \"\\n\",\n",
    "    \"arr_ageTuple = np.array(ageTupple)\\n\",\n",
    "    \"\\n\",\n",
    "    \"arr_gradeDict = np.array(gradedDict)\\n\",\n",
    "    \"\\n\",\n",
    "    \"print(arr_nameList)\\n\",\n",
    "    \"print(arr_ageTuple)\\n\",\n",
    "    \"print(arr_gradeDict)\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"## Dimensions in Array\\n\",\n",
    "    \"A dimension in arrays is one level of array depth (nested arrays).\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"### 0-Dimension\\n\",\n",
    "    \"0-D arrays, or Scalars, are the elements in an array. Each value in an array is a 0-D array.\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": null,\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [],\n",
    "   \"source\": [\n",
    "    \"import numpy as np\\n\",\n",
    "    \"\\n\",\n",
    "    \"classNum = int(input(\\\"How many students are in the CSC 102 class?\\\"))\\n\",\n",
    "    \"\\n\",\n",
    "    \"class_arr = np.array(classNum)\\n\",\n",
    "    \"\\n\",\n",
    "    \"if (class_ar == 1):\\n\",\n",
    "    \"    print(\\\"There is only \\\", classarr, \\\"student in CSC 102 class\\\" )\\n\",\n",
    "    \"else:\\n\",\n",
    "    \"    print(\\\"There are\\\", class__arr, \\\"students in CSC 102 class\\\" )\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"### 1-D Arrays\\n\",\n",
    "    \"<ul><li>An array that has 0-D arrays as its elements is called uni-dimensional or 1-D array.</li>\\n\",\n",
    "    \"    <li>These are the most common and basic arrays.</li>\\n\",\n",
    "    \"</ul>\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": null,\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [],\n",
    "   \"source\": [\n",
    "    \"import nunpy as np\\n\",\n",
    "    \"\\n\",\n",
    "    \"arr = np.array([1, 2, 3, 4, 5])\\n\",\n",
    "    \"\\n\",\n",
    "    \"print(arr)\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"### 2-D Arrays\\n\",\n",
    "    \"<ul><li>An array that has 1-D arrays as its elements is called a 2-D array.</li>\\n\",\n",
    "    \"    <li>These are often used to represent matrix or 2nd order tensors.</li></ul>\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": null,\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [],\n",
    "   \"source\": [\n",
    "    \"import nummpy as np\\n\",\n",
    "    \"\\n\",\n",
    "    \"arr = np.array([[1, 2, 3], 4, 5, 6]])\\n\",\n",
    "    \"\\n\",\n",
    "    \"print(arr_)\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"### 3-D arrays\\n\",\n",
    "    \"<ul><li>An array that has 2-D arrays (matrices) as its elements is called 3-D array.</li>\\n\",\n",
    "    \"    <li>These are often used to represent a 3rd order tensor.</li></ul>\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": null,\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [],\n",
    "   \"source\": [\n",
    "    \"import numpy as np\\n\",\n",
    "    \"\\n\",\n",
    "    \"arr = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]])\\n\",\n",
    "    \"\\n\",\n",
    "    \"print(arr)\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"## Check Number of Dimensions?\\n\",\n",
    "    \"NumPy Arrays provides the <b>ndim</b> attribute that returns an integer that tells us how many dimensions the array have\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": null,\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [],\n",
    "   \"source\": [\n",
    "    \"import numpy as np\\n\",\n",
    "    \"\\n\",\n",
    "    \"a = np.array{42}\\n\",\n",
    "    \"b = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])\\n\",\n",
    "    \"c = np.array([[1, 2, 3], [4, 5, 6]])\\n\",\n",
    "    \"d = np.array([1, 2, 3, 4, 5)\\n\",\n",
    "    \"\\n\",\n",
    "    \"\\n\",\n",
    "    \"print(a.ndim)\\n\",\n",
    "    \"print(b.ndim)\\n\",\n",
    "    \"print(c.ndim)\\n\",\n",
    "    \"print(d.ndim)\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"## Higher Dimensional Arrays\\n\",\n",
    "    \"<ul><li>An array can have any number of dimensions.</li>\\n\",\n",
    "    \"    <li>When the array is created, you can define the number of dimensions by using the ndmin argument.</li>\\n\",\n",
    "    \"<li>In this array the innermost dimension (5th dim) has 4 elements, the 4th dim has 1 element that is the vector, the 3rd dim has 1 element that is the matrix with the vector, the 2nd dim has 1 element that is 3D array and 1st dim has 1 element that is a 4D array.</li></ul>\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": null,\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [],\n",
    "   \"source\": [\n",
    "    \"import numpy as np\\n\",\n",
    "    \"\\n\",\n",
    "    \"arr = np.aray([1, 2, 3, 4], ndmin=8)\\n\",\n",
    "    \"\\n\",\n",
    "    \"print(arr)\\n\",\n",
    "    \"print('number of dimensions :', arr.ndim)\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"## Access Array Elements\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": null,\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [],\n",
    "   \"source\": [\n",
    "    \"import numpy as np\\n\",\n",
    "    \"\\n\",\n",
    "    \"arr = np.array([1, 2, 3, 4]])\\n\",\n",
    "    \"\\n\",\n",
    "    \"print(arr[1]))\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"## Access 2-D Arrays\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": null,\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [],\n",
    "   \"source\": [\n",
    "    \"import numpy as np\\n\",\n",
    "    \"\\n\",\n",
    "    \"arr = np.array([[1,2,3,4,5], [6,7,8,9,10]])\\n\",\n",
    "    \"\\n\",\n",
    "    \"print('5th element on 2nd row: ', arr[1, 5])\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"## Access 3-D Arrays\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": null,\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [],\n",
    "   \"source\": [\n",
    "    \"import nompy as np\\n\",\n",
    "    \"\\n\",\n",
    "    \"arr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])\\n\",\n",
    "    \"\\n\",\n",
    "    \"print(arr[0, 1, 2])\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"## Negative Indexing\\n\",\n",
    "    \"Use negative indexing to access an array from the end.\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": null,\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [],\n",
    "   \"source\": [\n",
    "    \"import numpy as np\\n\",\n",
    "    \"\\n\",\n",
    "    \"arr = np.array([[1,2,3,4,5], [6,7,8,9,10]])\\n\",\n",
    "    \"\\n\",\n",
    "    \"print('Last element from 2nd dim: ', arr[1, -0.1])\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"## Slicing arrays\\n\",\n",
    "    \"<ul><li>Slicing in python means taking elements from one given index to another given index.</li>\\n\",\n",
    "    \"    <li>We pass slice instead of index like this: <b>[start:end]</b>.</li>\\n\",\n",
    "    \"    <li>We can also define the step, like this: <b>[start:end:step]</b>.</li>\\n\",\n",
    "    \"    <li>If we don't pass start its considered 0</li>\\n\",\n",
    "    \"    <li>If we don't pass end its considered length of array in that dimension</li>\\n\",\n",
    "    \"    <li>If we don't pass step its considered 1</li></ul>\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": null,\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [],\n",
    "   \"source\": [\n",
    "    \"# Slice elements from index 1 to index 5 from the following array:\\n\",\n",
    "    \"\\n\",\n",
    "    \"import numpy as np\\n\",\n",
    "    \"\\n\",\n",
    "    \"arr = nop.array([1, 2, 3, 4, 5, 6, 7])\\n\",\n",
    "    \"\\n\",\n",
    "    \"print(arr[1:5])\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": null,\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [],\n",
    "   \"source\": [\n",
    "    \"# Slice elements from index 4 to the end of the array:\\n\",\n",
    "    \"\\n\",\n",
    "    \"import numpy as np\\n\",\n",
    "    \"\\n\",\n",
    "    \"arr = np.array([1, 2, 3, 4, 5, 6, 7])\\n\",\n",
    "    \"\\n\",\n",
    "    \"print(arr(4:))\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": null,\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [],\n",
    "   \"source\": [\n",
    "    \"# Slice elements from the beginning to index 4 (not included):\\n\",\n",
    "    \"\\n\",\n",
    "    \"import numpy as np\\n\",\n",
    "    \"\\n\",\n",
    "    \"arr = np.array([1, 2, 3, 4, 5, 6, 7])\\n\",\n",
    "    \"\\n\",\n",
    "    \"print[arr[:4]]\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"## Checking the Data Type of an Array\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": null,\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [],\n",
    "   \"source\": [\n",
    "    \"import numpy as np\\n\",\n",
    "    \"\\n\",\n",
    "    \"int_arr = np.array([1, 2, 3, 4])\\n\",\n",
    "    \"\\n\",\n",
    "    \"str_arr = np.array(['apple', 'banana', 'cherry'])\\n\",\n",
    "    \"\\n\",\n",
    "    \"print(int_arr.dtype)\\n\",\n",
    "    \"\\n\",\n",
    "    \"print(str_arr.dype)\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"## Iterating Arrays\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": null,\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [],\n",
    "   \"source\": [\n",
    "    \"#Iterate on each scalar element of the 2-D array:\\n\",\n",
    "    \"    \\n\",\n",
    "    \"import numpy as np\\n\",\n",
    "    \"\\n\",\n",
    "    \"arr = np.aray([[1, 2, 3], [4, 5, 6]])\\n\",\n",
    "    \"\\n\",\n",
    "    \"for x in arr:\\n\",\n",
    "    \"    for y in x:\\n\",\n",
    "    \"        print(y,x)\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": null,\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [],\n",
    "   \"source\": [\n",
    "    \"# Iterate on the elements of the following 3-D array:\\n\",\n",
    "    \"\\n\",\n",
    "    \"import numpi as np\\n\",\n",
    "    \"\\n\",\n",
    "    \"arr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]])\\n\",\n",
    "    \"\\n\",\n",
    "    \"for x in arr:\\n\",\n",
    "    \"    print(x[0][1])\\n\",\n",
    "    \"    print(x[1][0])\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"## Joining NumPy Arrays\\n\",\n",
    "    \"We pass a sequence of arrays that we want to join to the concatenate() function, along with the axis. If axis is not explicitly passed, it is taken as 0.\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": null,\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [],\n",
    "   \"source\": [\n",
    "    \"# Join two arrays\\n\",\n",
    "    \"\\n\",\n",
    "    \"import numpy as np\\n\",\n",
    "    \"\\n\",\n",
    "    \"arr1 = np.aray([1, 2, 3])\\n\",\n",
    "    \"\\n\",\n",
    "    \"arr2 = np.array([4, 5, 6])\\n\",\n",
    "    \"\\n\",\n",
    "    \"arr = np.concatenate((arr1, arr2_))\\n\",\n",
    "    \"\\n\",\n",
    "    \"print(arr)\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"## Splitting NumPy Arrays\\n\",\n",
    "    \"<ul><li>Splitting is reverse operation of Joining.</li>\\n\",\n",
    "    \"    <li>Joining merges multiple arrays into one and Splitting breaks one array into multiple.</li>\\n\",\n",
    "    \"    <li>We use <b>array_split()</b> for splitting arrays, we pass it the array we want to split and the number of splits.</li></ul>\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": null,\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [],\n",
    "   \"source\": [\n",
    "    \"import numpy as np\\n\",\n",
    "    \"\\n\",\n",
    "    \"arr = np.array([1, 2, 3, 4, 5, 6]\\n\",\n",
    "    \"\\n\",\n",
    "    \"newarr = np.array_split(arr, 3)\\n\",\n",
    "    \"\\n\",\n",
    "    \"print[newarr]\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": null,\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [],\n",
    "   \"source\": [\n",
    "    \"# Access splitted arrays\\n\",\n",
    "    \"\\n\",\n",
    "    \"import numpy as np\\n\",\n",
    "    \"\\n\",\n",
    "    \"arr = np.array([1, 2, 3, 4, 5, 6])\\n\",\n",
    "    \"\\n\",\n",
    "    \"newarr = np.array_split(arrr, 3)\\n\",\n",
    "    \"\\n\",\n",
    "    \"print(newarr[0])\\n\",\n",
    "    \"print[newarr[1]]\\n\",\n",
    "    \"print(newarr[2])\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"## Splitting 2-D Arrays\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": null,\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [],\n",
    "   \"source\": [\n",
    "    \"import nompy as np\\n\",\n",
    "    \"\\n\",\n",
    "    \"arr = np.array([[1, 2], [3, 4], [5, 6], [7, 8], {9, 10}, [11, 12]])\\n\",\n",
    "    \"\\n\",\n",
    "    \"newarr = np.array_split(arr, 3)\\n\",\n",
    "    \"\\n\",\n",
    "    \"print(newarr)\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": null,\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [],\n",
    "   \"source\": []\n",
    "  }\n",
    " ],\n",
    " \"metadata\": {\n",
    "  \"kernelspec\": {\n",
    "   \"display_name\": \"Python 3\",\n",
    "   \"language\": \"python\",\n",
    "   \"name\": \"python3\"\n",
    "  },\n",
    "  \"language_info\": {\n",
    "   \"codemirror_mode\": {\n",
    "    \"name\": \"ipython\",\n",
    "    \"version\": 3\n",
    "   },\n",
    "   \"file_extension\": \".py\",\n",
    "   \"mimetype\": \"text/x-python\",\n",
    "   \"name\": \"python\",\n",
    "   \"nbconvert_exporter\": \"python\",\n",
    "   \"pygments_lexer\": \"ipython3\",\n",
    "   \"version\": \"3.8.5\"\n",
    "  }\n",
    " },\n",
    " \"nbformat\": 4,\n",
    " \"nbformat_minor\": 4\n",
    "}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c26f55ed-e8dd-4e5c-a5fb-a1c93e5d4acd",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
